package restaurant.gui;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.TableColumn;
import restaurant.gui.celleditors.SpinnerNumericCellEditor;
import restaurant.gui.validators.KeyListenerType;
import restaurant.gui.validators.TextFieldInputValidator;
import restaurant.model.dao.DrinkDAO;
import restaurant.model.dao.MealDAO;
import restaurant.model.MealType;
import restaurant.model.dto.DrinkDTO;
import restaurant.model.dto.MealDTO;
import restaurant.model.tmodels.TModelDrinks;
import restaurant.model.tmodels.TModelMeal;

/**
 *
 * @author igor
 */
public class MainWindow extends javax.swing.JFrame {
    private static final int TABLE_ROW_HEIGHT = 30;
    private MealDAO daoMeal;
    private DrinkDAO daoDrink;
    private StringBuilder receipt;
    public MainWindow() {
        daoMeal = new MealDAO();
        daoDrink = new DrinkDAO();
        receipt = new StringBuilder("");
        initComponents();
        adjustGUI();
        setIDInputsValidators();
        setValidatorForSpinners();
        loadCombos();
        loadTableMeal(daoMeal.readAll());
        loadTableDrinks(daoDrink.readAll());
    }
    
    private void adjustGUI(){
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        tableMeal.setRowHeight(TABLE_ROW_HEIGHT);
        tableMeal.setAutoCreateRowSorter(true);
        tableDrinks.setRowHeight(TABLE_ROW_HEIGHT);
        tableDrinks.setAutoCreateRowSorter(true);
    }
    
    private void setIDInputsValidators(){
        txtIDMeal.addKeyListener(
                new TextFieldInputValidator(KeyListenerType.INTEGER_VALUES_ONLY)
        );
        txtIDDrinks.addKeyListener(
                new TextFieldInputValidator(KeyListenerType.INTEGER_VALUES_ONLY)
        );
    }
    
    private void setValidatorForSpinners(){
        setValidatorForSpinner(spinnerDiscount, 0.0, 0.0, 1000000000.0, 0.1);
        setValidatorForSpinner(spinnerTax, 0.0, 0.0, 1000000000.0, 0.1);
        setValidatorForSpinner(spinnerDelivery, 0.0, 0.0, 1000000000.0, 0.1);
        setValidatorForSpinner(spinnerMealPriceMIN, 0.0, 0.0, 1000000000.0, 0.1);
        setValidatorForSpinner(spinnerMealPriceMAX, 0.0, 0.0, 1000000000.0, 0.1);
        setValidatorForSpinner(spinnerDrinksPriceMIN, 0.0, 0.0, 1000000000.0, 0.1);
        setValidatorForSpinner(spinnerDrinksPriceMAX, 0.0, 0.0, 1000000000.0, 0.1);
        setValidatorForSpinner(spinnerPriceDrink, 0.0, 0.0, 1000000000.0, 0.1);
        setValidatorForSpinner(spinnerPriceMeal, 0.0, 0.0, 1000000000.0, 0.1);
    }
    
    private void setValidatorForSpinner(JSpinner spinner, double val, double min,
            double max, double step){
        SpinnerNumberModel model = new SpinnerNumberModel(val, min, max, step);
        spinner.setModel(model);
        JSpinner.DefaultEditor editor = (JSpinner.DefaultEditor)spinner.getEditor();
        editor.getTextField().addKeyListener(new TextFieldInputValidator(KeyListenerType.FLOAT_VALUES_ONLY));
    }
    
    private void loadCombos(){
        MealType[] values = MealType.values();
        comboMealTypes.removeAllItems();
        for(MealType mt : values){
            comboMealTypes.addItem(mt);
        }
    }
    
    private void loadTableMeal(List<MealDTO> listMeal){
        tableMeal.setModel(new TModelMeal(listMeal));
        TableColumn tcm = tableMeal.getColumnModel().getColumn(TModelMeal.COLUMN_SERVES_NUMBER);
        tcm.setCellEditor(new SpinnerNumericCellEditor(0, 0, 1000, 1));
    }
    
    private void loadTableDrinks(List<DrinkDTO> listDrinks){
    tableDrinks.setModel(new TModelDrinks(listDrinks));
    TableColumn tcd = tableDrinks.getColumnModel().getColumn(TModelDrinks.COLUMN_SERVES_NUMBER);
    tcd.setCellEditor(new SpinnerNumericCellEditor(0, 0, 1000, 1));
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableMeal = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtMealCost = new javax.swing.JTextField();
        txtDrinksCost = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtSubtotal = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        btnTotal = new javax.swing.JButton();
        btnResetTotal = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        spinnerDiscount = new javax.swing.JSpinner();
        rbtnDiscountPercentage = new javax.swing.JRadioButton();
        rbtnDiscountAbsolute = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        spinnerTax = new javax.swing.JSpinner();
        jLabel21 = new javax.swing.JLabel();
        spinnerDelivery = new javax.swing.JSpinner();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableDrinks = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        checkBoxIsMealVegetarian = new javax.swing.JCheckBox();
        checkBoxIsMealTransgenic = new javax.swing.JCheckBox();
        checkBoxIsMealAvailable = new javax.swing.JCheckBox();
        txtIDMeal = new javax.swing.JTextField();
        comboMealTypes = new javax.swing.JComboBox();
        spinnerPriceMeal = new javax.swing.JSpinner();
        btnInsertMeal = new javax.swing.JButton();
        btnUpdateMeal = new javax.swing.JButton();
        btnDeleteMeal = new javax.swing.JButton();
        txtNameMeal = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        btnResetSearchDrinks = new javax.swing.JButton();
        btnSearchDrinks = new javax.swing.JButton();
        txtSearchDrinks = new javax.swing.JTextField();
        spinnerDrinksPriceMIN = new javax.swing.JSpinner();
        jLabel16 = new javax.swing.JLabel();
        checkBoxConsiderPriceDrinks = new javax.swing.JCheckBox();
        jLabel17 = new javax.swing.JLabel();
        spinnerDrinksPriceMAX = new javax.swing.JSpinner();
        checkBoxOnlyNonAlcogolic = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        txtSearchMeal = new javax.swing.JTextField();
        btnSearchMeal = new javax.swing.JButton();
        btnResetMealSearch = new javax.swing.JButton();
        checkBoxOnlyVegans = new javax.swing.JCheckBox();
        jLabel14 = new javax.swing.JLabel();
        spinnerMealPriceMIN = new javax.swing.JSpinner();
        jLabel15 = new javax.swing.JLabel();
        spinnerMealPriceMAX = new javax.swing.JSpinner();
        checkBoxConsiderMealPrice = new javax.swing.JCheckBox();
        txtNameDrink = new javax.swing.JPanel();
        btnInsertDrink = new javax.swing.JButton();
        btnUpdateDrink = new javax.swing.JButton();
        btnDeleteDrink = new javax.swing.JButton();
        checkBoxIsDrinkAvailable = new javax.swing.JCheckBox();
        checkBoxIsDrinkAlcoholic = new javax.swing.JCheckBox();
        spinnerPriceDrink = new javax.swing.JSpinner();
        txtIDDrinks = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        txtNameDrinks = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtAreaReceipt = new javax.swing.JTextArea();
        btnShowReceipt = new javax.swing.JButton();
        btnSaveReceiptToFile = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tableMeal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tableMeal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableMealMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tableMeal);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 35, 555, 285));

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Cost of meal");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 113, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Cost of drinks");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 136, -1));

        txtMealCost.setEditable(false);
        txtMealCost.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPanel1.add(txtMealCost, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 10, 130, -1));

        txtDrinksCost.setEditable(false);
        txtDrinksCost.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPanel1.add(txtDrinksCost, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 50, 130, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("Subtotal");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 84, -1));

        txtSubtotal.setEditable(false);
        txtSubtotal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPanel1.add(txtSubtotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 90, 130, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Total");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 84, -1));

        txtTotal.setEditable(false);
        txtTotal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPanel1.add(txtTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 130, 130, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 548, 310, 170));

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnTotal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnTotal.setText("Total");
        btnTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTotalActionPerformed(evt);
            }
        });
        jPanel2.add(btnTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 90, -1));

        btnResetTotal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnResetTotal.setText("Reset");
        btnResetTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetTotalActionPerformed(evt);
            }
        });
        jPanel2.add(btnResetTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 130, 95, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Discount");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 62, -1));

        spinnerDiscount.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPanel2.add(spinnerDiscount, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 10, 119, -1));

        buttonGroup1.add(rbtnDiscountPercentage);
        rbtnDiscountPercentage.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        rbtnDiscountPercentage.setSelected(true);
        rbtnDiscountPercentage.setText("percentage");
        rbtnDiscountPercentage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                rbtnDiscountPercentageMouseReleased(evt);
            }
        });
        jPanel2.add(rbtnDiscountPercentage, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, -1));

        buttonGroup1.add(rbtnDiscountAbsolute);
        rbtnDiscountAbsolute.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        rbtnDiscountAbsolute.setText("absolute");
        rbtnDiscountAbsolute.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                rbtnDiscountAbsoluteMouseReleased(evt);
            }
        });
        jPanel2.add(rbtnDiscountAbsolute, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, -1, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Tax:");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, -1, -1));

        spinnerTax.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPanel2.add(spinnerTax, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 70, 119, -1));

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel21.setText("Delivery:");
        jPanel2.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, -1));

        spinnerDelivery.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPanel2.add(spinnerDelivery, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 100, 120, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(336, 548, 230, 170));

        tableDrinks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tableDrinks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableDrinksMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tableDrinks);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(573, 35, 580, 285));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel8.setText("Drinks");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(826, 0, -1, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel9.setText("Meal");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 0, -1, -1));

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel10.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel10.setText("ID:");
        jPanel3.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(14, 20, -1, -1));

        jLabel11.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel11.setText("Price:");
        jPanel3.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(14, 49, -1, -1));

        jLabel12.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel12.setText("Type:");
        jPanel3.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(356, 20, -1, -1));

        checkBoxIsMealVegetarian.setText("vegetarian");
        jPanel3.add(checkBoxIsMealVegetarian, new org.netbeans.lib.awtextra.AbsoluteConstraints(193, 46, -1, -1));

        checkBoxIsMealTransgenic.setText("transgenic");
        jPanel3.add(checkBoxIsMealTransgenic, new org.netbeans.lib.awtextra.AbsoluteConstraints(313, 46, -1, -1));

        checkBoxIsMealAvailable.setText("available");
        jPanel3.add(checkBoxIsMealAvailable, new org.netbeans.lib.awtextra.AbsoluteConstraints(437, 46, -1, -1));

        txtIDMeal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPanel3.add(txtIDMeal, new org.netbeans.lib.awtextra.AbsoluteConstraints(71, 17, 104, -1));

        comboMealTypes.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPanel3.add(comboMealTypes, new org.netbeans.lib.awtextra.AbsoluteConstraints(413, 14, 128, -1));

        spinnerPriceMeal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPanel3.add(spinnerPriceMeal, new org.netbeans.lib.awtextra.AbsoluteConstraints(72, 46, 103, -1));

        btnInsertMeal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnInsertMeal.setText("INSERT");
        btnInsertMeal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertMealActionPerformed(evt);
            }
        });
        jPanel3.add(btnInsertMeal, new org.netbeans.lib.awtextra.AbsoluteConstraints(14, 74, 161, -1));

        btnUpdateMeal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnUpdateMeal.setText("UPDATE");
        btnUpdateMeal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateMealActionPerformed(evt);
            }
        });
        jPanel3.add(btnUpdateMeal, new org.netbeans.lib.awtextra.AbsoluteConstraints(193, 74, 158, -1));

        btnDeleteMeal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnDeleteMeal.setText("DELETE");
        btnDeleteMeal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteMealActionPerformed(evt);
            }
        });
        jPanel3.add(btnDeleteMeal, new org.netbeans.lib.awtextra.AbsoluteConstraints(363, 74, 178, -1));

        txtNameMeal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPanel3.add(txtNameMeal, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 17, 104, -1));

        jLabel13.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel13.setText("Name:");
        jPanel3.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(193, 20, -1, -1));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 421, 555, 110));

        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnResetSearchDrinks.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnResetSearchDrinks.setText("RESET");
        btnResetSearchDrinks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetSearchDrinksActionPerformed(evt);
            }
        });
        jPanel4.add(btnResetSearchDrinks, new org.netbeans.lib.awtextra.AbsoluteConstraints(453, 14, 88, -1));

        btnSearchDrinks.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnSearchDrinks.setText("SEARCH");
        btnSearchDrinks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchDrinksActionPerformed(evt);
            }
        });
        jPanel4.add(btnSearchDrinks, new org.netbeans.lib.awtextra.AbsoluteConstraints(354, 14, -1, -1));

        txtSearchDrinks.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPanel4.add(txtSearchDrinks, new org.netbeans.lib.awtextra.AbsoluteConstraints(14, 14, 334, -1));

        spinnerDrinksPriceMIN.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPanel4.add(spinnerDrinksPriceMIN, new org.netbeans.lib.awtextra.AbsoluteConstraints(197, 47, 68, -1));

        jLabel16.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel16.setText("MIN:");
        jPanel4.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(151, 50, -1, -1));

        checkBoxConsiderPriceDrinks.setText("consider price");
        jPanel4.add(checkBoxConsiderPriceDrinks, new org.netbeans.lib.awtextra.AbsoluteConstraints(14, 47, -1, -1));

        jLabel17.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel17.setText("MAX:");
        jPanel4.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(277, 50, -1, -1));

        spinnerDrinksPriceMAX.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPanel4.add(spinnerDrinksPriceMAX, new org.netbeans.lib.awtextra.AbsoluteConstraints(329, 47, 68, -1));

        checkBoxOnlyNonAlcogolic.setText("only nonalcoholic");
        jPanel4.add(checkBoxOnlyNonAlcogolic, new org.netbeans.lib.awtextra.AbsoluteConstraints(405, 47, -1, -1));

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(573, 326, 580, 80));

        jPanel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtSearchMeal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPanel5.add(txtSearchMeal, new org.netbeans.lib.awtextra.AbsoluteConstraints(14, 14, 334, -1));

        btnSearchMeal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnSearchMeal.setText("SEARCH");
        btnSearchMeal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchMealActionPerformed(evt);
            }
        });
        jPanel5.add(btnSearchMeal, new org.netbeans.lib.awtextra.AbsoluteConstraints(354, 14, -1, -1));

        btnResetMealSearch.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnResetMealSearch.setText("RESET");
        btnResetMealSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetMealSearchActionPerformed(evt);
            }
        });
        jPanel5.add(btnResetMealSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(453, 14, 88, -1));

        checkBoxOnlyVegans.setText("only vegetarian");
        jPanel5.add(checkBoxOnlyVegans, new org.netbeans.lib.awtextra.AbsoluteConstraints(405, 47, -1, -1));

        jLabel14.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel14.setText("MIN:");
        jPanel5.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(151, 50, -1, -1));

        spinnerMealPriceMIN.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPanel5.add(spinnerMealPriceMIN, new org.netbeans.lib.awtextra.AbsoluteConstraints(197, 47, 68, -1));

        jLabel15.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel15.setText("MAX:");
        jPanel5.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(277, 50, -1, -1));

        spinnerMealPriceMAX.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPanel5.add(spinnerMealPriceMAX, new org.netbeans.lib.awtextra.AbsoluteConstraints(329, 47, 68, -1));

        checkBoxConsiderMealPrice.setText("consider price");
        jPanel5.add(checkBoxConsiderMealPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(14, 47, -1, -1));

        getContentPane().add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 326, 550, 80));

        txtNameDrink.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        txtNameDrink.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnInsertDrink.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnInsertDrink.setText("INSERT");
        btnInsertDrink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertDrinkActionPerformed(evt);
            }
        });
        txtNameDrink.add(btnInsertDrink, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 161, -1));

        btnUpdateDrink.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnUpdateDrink.setText("UPDATE");
        btnUpdateDrink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateDrinkActionPerformed(evt);
            }
        });
        txtNameDrink.add(btnUpdateDrink, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 70, 164, -1));

        btnDeleteDrink.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnDeleteDrink.setText("DELETE");
        btnDeleteDrink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteDrinkActionPerformed(evt);
            }
        });
        txtNameDrink.add(btnDeleteDrink, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 70, 140, -1));

        checkBoxIsDrinkAvailable.setText("available");
        txtNameDrink.add(checkBoxIsDrinkAvailable, new org.netbeans.lib.awtextra.AbsoluteConstraints(94, 38, -1, -1));

        checkBoxIsDrinkAlcoholic.setText("alcohol");
        txtNameDrink.add(checkBoxIsDrinkAlcoholic, new org.netbeans.lib.awtextra.AbsoluteConstraints(14, 38, -1, -1));

        spinnerPriceDrink.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtNameDrink.add(spinnerPriceDrink, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 10, 138, -1));

        txtIDDrinks.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtNameDrink.add(txtIDDrinks, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, 104, -1));

        jLabel18.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel18.setText("ID:");
        txtNameDrink.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jLabel19.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel19.setText("Price:");
        txtNameDrink.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 10, -1, -1));

        jLabel20.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel20.setText("Name:");
        txtNameDrink.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, -1, -1));

        txtNameDrinks.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtNameDrink.add(txtNameDrinks, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 10, 104, -1));

        getContentPane().add(txtNameDrink, new org.netbeans.lib.awtextra.AbsoluteConstraints(573, 421, 580, 110));

        jPanel6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        txtAreaReceipt.setEditable(false);
        txtAreaReceipt.setColumns(20);
        txtAreaReceipt.setRows(5);
        jScrollPane3.setViewportView(txtAreaReceipt);

        btnShowReceipt.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnShowReceipt.setText("Receipt");
        btnShowReceipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowReceiptActionPerformed(evt);
            }
        });

        btnSaveReceiptToFile.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnSaveReceiptToFile.setText("Save recept to file ...");
        btnSaveReceiptToFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveReceiptToFileActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSaveReceiptToFile, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                    .addComponent(btnExit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnShowReceipt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(btnShowReceipt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSaveReceiptToFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnExit)
                        .addGap(0, 31, Short.MAX_VALUE)))
                .addContainerGap())
        );

        getContentPane().add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 550, 570, 160));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tableMealMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMealMouseReleased
        if(evt.getClickCount() == 2){
            int row = tableMeal.getSelectedRow();
            TModelMeal model = (TModelMeal)tableMeal.getModel();
            MealDTO selMeal = model.getMeal(row);
            txtIDMeal.setText(String.valueOf(selMeal.getId()));
            txtNameMeal.setText(selMeal.getName());
            for(int i = 0; i < comboMealTypes.getItemCount(); ++i){
                if(comboMealTypes.getItemAt(i).equals(selMeal.getType())){
                    comboMealTypes.setSelectedIndex(i);
                    break;
                }
            }
            spinnerPriceMeal.setValue(selMeal.getPrice());
            checkBoxIsMealVegetarian.setSelected(selMeal.isVegetarian());
            checkBoxIsMealTransgenic.setSelected(selMeal.isTransgenic());
            checkBoxIsMealAvailable.setSelected(selMeal.isAvailable());
        }
    }//GEN-LAST:event_tableMealMouseReleased

    private void tableDrinksMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableDrinksMouseReleased
        if(evt.getClickCount() == 2){
            int row = tableDrinks.getSelectedRow();
            TModelDrinks model = (TModelDrinks)tableDrinks.getModel();
            DrinkDTO selDrink = model.getDrink(row);
            txtIDDrinks.setText(String.valueOf(selDrink.getId()));
            txtNameDrinks.setText(selDrink.getName());
            spinnerPriceDrink.setValue(selDrink.getPrice());
            checkBoxIsDrinkAlcoholic.setSelected(selDrink.isAlcohol());
            checkBoxIsDrinkAvailable.setSelected(selDrink.isAvailable());
        }
    }//GEN-LAST:event_tableDrinksMouseReleased

    private void rbtnDiscountPercentageMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbtnDiscountPercentageMouseReleased
        setValidatorForSpinner(spinnerDiscount, 0.0, 0.0, 100.0, 1.0);
    }//GEN-LAST:event_rbtnDiscountPercentageMouseReleased

    private void rbtnDiscountAbsoluteMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbtnDiscountAbsoluteMouseReleased
        setValidatorForSpinner(spinnerDiscount, 0.0, 0.0, 1000000000.0, 1.0);
    }//GEN-LAST:event_rbtnDiscountAbsoluteMouseReleased
    
    private void clearMealInputForm(){
        txtIDMeal.setText(null);
        txtNameMeal.setText(null);
        if(comboMealTypes.getItemCount() > 0){
            comboMealTypes.setSelectedIndex(0);
        }
        spinnerPriceMeal.setValue(0.0);
        checkBoxIsMealVegetarian.setSelected(false);
        checkBoxIsMealTransgenic.setSelected(false);
        checkBoxIsMealAvailable.setSelected(false);
    }
    
    private void clearMealSearchForm(){
        txtSearchMeal.setText(null);
        checkBoxConsiderMealPrice.setSelected(false);
        spinnerMealPriceMIN.setValue(0.0);
        spinnerMealPriceMAX.setValue(0.0);
        checkBoxOnlyVegans.setSelected(false);
    }
    
    private void clearDrinkInputForm(){
        txtIDDrinks.setText(null);
        txtNameDrinks.setText(null);
        spinnerPriceDrink.setValue(0.0);
        checkBoxIsDrinkAlcoholic.setSelected(false);
        checkBoxIsDrinkAvailable.setSelected(false);
    }
    
    private void clearDrinkSeachForm(){
        txtSearchDrinks.setText(null);
        checkBoxConsiderPriceDrinks.setSelected(false);
        spinnerDrinksPriceMIN.setValue(0.0);
        spinnerDrinksPriceMAX.setValue(0.0);
        checkBoxOnlyNonAlcogolic.setSelected(false);
    }
    
    private void clearTablesSelection(){
        tableMeal.getSelectionModel().clearSelection();
        tableDrinks.getSelectionModel().clearSelection();
    }
    
    private void btnInsertMealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertMealActionPerformed
        MealDTO meal = readMealFromIputFields();
        boolean insert = daoMeal.insert(meal);
        if(insert){
            loadTableMeal(daoMeal.repeatLastSearch());
            clearMealInputForm();
        }
    }//GEN-LAST:event_btnInsertMealActionPerformed

    private void btnUpdateMealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateMealActionPerformed
        if(txtIDMeal.getText().isEmpty()){
            JOptionPane.showMessageDialog(
                null,
                "Please, set meal ID!",
                "Error",
                JOptionPane.ERROR_MESSAGE
            );
        } else {
            int id = Integer.parseInt(txtIDMeal.getText());
            MealDTO meal = readMealFromIputFields();
            meal.setId(id);
            boolean update = daoMeal.update(meal);
            if(update){
                loadTableMeal(daoMeal.repeatLastSearch());
                clearMealInputForm();
            }
        }
    }//GEN-LAST:event_btnUpdateMealActionPerformed

    private void btnDeleteMealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteMealActionPerformed
        if(txtIDMeal.getText().isEmpty()){
            JOptionPane.showMessageDialog(
                null,
                "Please, set meal ID!",
                "Error",
                JOptionPane.ERROR_MESSAGE
                );
            } else {
                int id = Integer.parseInt(txtIDMeal.getText());
                int res = JOptionPane.showConfirmDialog(
                    null,
                    "Do you really want delete selected meal?",
                    "Cofirm delete",
                    JOptionPane.YES_NO_OPTION
                );
                if(res == JOptionPane.YES_OPTION){
                    boolean delete = daoMeal.delete(id);
                    if(delete){
                        loadTableMeal(daoMeal.repeatLastSearch());
                        clearMealInputForm();
                    }
                }
        }
    }//GEN-LAST:event_btnDeleteMealActionPerformed

    private void btnSearchMealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchMealActionPerformed
        String regExp = txtSearchMeal.getText();
        boolean considerPrice = checkBoxConsiderMealPrice.isSelected();
        double priceMin = (double)spinnerMealPriceMIN.getValue();
        double priceMax = (double)spinnerMealPriceMAX.getValue();
        if(priceMax < priceMin){
            priceMax = priceMin;
            spinnerMealPriceMAX.setValue(priceMax);
        }
        boolean onlyVegans = checkBoxOnlyVegans.isSelected();
        List<MealDTO> list = daoMeal.search(regExp, considerPrice, priceMin, priceMax, onlyVegans);
        loadTableMeal(list);
    }//GEN-LAST:event_btnSearchMealActionPerformed

    private void btnResetMealSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetMealSearchActionPerformed
        List<MealDTO> list = daoMeal.readAll();
        loadTableMeal(list);
        tableMeal.getSelectionModel().clearSelection();
        clearDrinkInputForm();
        
    }//GEN-LAST:event_btnResetMealSearchActionPerformed

    private void btnInsertDrinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertDrinkActionPerformed
        DrinkDTO drink = readDrinkFromInputFields();
        boolean insert = daoDrink.insert(drink);
        if(insert){
            loadTableDrinks(daoDrink.readAll());
            clearDrinkInputForm();
        } 
    }//GEN-LAST:event_btnInsertDrinkActionPerformed

    private void btnUpdateDrinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateDrinkActionPerformed
        if(txtIDDrinks.getText().isEmpty()){
            JOptionPane.showMessageDialog(
                null,
                "Please, set drink ID!",
                "Error",
                JOptionPane.ERROR_MESSAGE
            );
        } else {
            int id = Integer.parseInt(txtIDDrinks.getText());
            DrinkDTO drink = readDrinkFromInputFields();
            drink.setId(id);
            boolean update = daoDrink.update(drink);
            if(update){
                loadTableDrinks(daoDrink.readAll());
                clearDrinkInputForm();
            }
        }
    }//GEN-LAST:event_btnUpdateDrinkActionPerformed

    private void btnDeleteDrinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteDrinkActionPerformed
        if(txtIDDrinks.getText().isEmpty()){
            JOptionPane.showMessageDialog(
                null,
                "Please, set drink ID!",
                "Error",
                JOptionPane.ERROR_MESSAGE
            );
        } else {
            int id = Integer.parseInt(txtIDDrinks.getText());
            boolean delete = daoDrink.delete(id);
            if(delete){
                loadTableDrinks(daoDrink.readAll());
                clearDrinkInputForm();
            }
        }
    }//GEN-LAST:event_btnDeleteDrinkActionPerformed

    private void btnTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTotalActionPerformed
        calcCosts();
    }//GEN-LAST:event_btnTotalActionPerformed

    private void btnResetTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetTotalActionPerformed
        clearTablesSelection();
        if(tableMeal.getRowCount() > 0){
            for(int i = 0; i < tableMeal.getRowCount(); ++i){
                tableMeal.getModel().setValueAt(0, i, TModelMeal.COLUMN_SERVES_NUMBER);
            }
        }
        
        if(tableDrinks.getRowCount() > 0){
            for(int i = 0; i < tableDrinks.getRowCount(); ++i){
                tableDrinks.getModel().setValueAt(0, i, TModelMeal.COLUMN_SERVES_NUMBER);
            }
        }
        txtMealCost.setText(null);
        txtDrinksCost.setText(null);
        txtSubtotal.setText(null);
        txtTotal.setText(null);
        spinnerDiscount.setValue(0.0);
        spinnerTax.setValue(0.0);
        spinnerDelivery.setValue(0.0);
    }//GEN-LAST:event_btnResetTotalActionPerformed

    private void btnSearchDrinksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchDrinksActionPerformed
        String regExp = txtSearchDrinks.getText();
        boolean considerPrice = checkBoxConsiderPriceDrinks.isSelected();
        double priceMin = (double)spinnerDrinksPriceMIN.getValue();
        double priceMac = (double)spinnerDrinksPriceMAX.getValue();
        boolean onlyNonAlcoholic = checkBoxOnlyNonAlcogolic.isSelected();
        List<DrinkDTO> list = daoDrink.search(regExp, considerPrice, priceMin,
                priceMac, onlyNonAlcoholic);
        loadTableDrinks(list);
        tableDrinks.getSelectionModel().clearSelection();
    }//GEN-LAST:event_btnSearchDrinksActionPerformed

    private void btnResetSearchDrinksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetSearchDrinksActionPerformed
        txtSearchDrinks.setText(null);
        checkBoxConsiderPriceDrinks.setSelected(false);
        spinnerDrinksPriceMIN.setValue(0.0);
        spinnerDrinksPriceMAX.setValue(0.0);
        checkBoxOnlyNonAlcogolic.setSelected(false);
        loadTableDrinks(daoDrink.readAll());
        tableDrinks.getSelectionModel().clearSelection();
        clearDrinkSeachForm();
    }//GEN-LAST:event_btnResetSearchDrinksActionPerformed
    
    private void btnSaveReceiptToFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveReceiptToFileActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("text files", "txt");
        fileChooser.addChoosableFileFilter(filter);
        int res = fileChooser.showSaveDialog(null);
        if(res == JFileChooser.APPROVE_OPTION){
            File selectedFile = fileChooser.getSelectedFile();
            String path = selectedFile.getAbsolutePath();
            try(BufferedWriter bw = new BufferedWriter(new FileWriter(path))){
                bw.write(txtAreaReceipt.getText());
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE
                );
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(
                null,
                "File has not been selected",
                "Warning",
                JOptionPane.WARNING_MESSAGE
            );
        }

        /*  private void btnChooseImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseImgActionPerformed
        JFileChooser file = new JFileChooser();
        file.setCurrentDirectory(new File(System.getProperty("user.home")));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("images", "jpg", "jpeg", "png");
        file.addChoosableFileFilter(filter);
        int result = file.showSaveDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = file.getSelectedFile();
            String path = selectedFile.getAbsolutePath();
            lblImage.setIcon(getScaledImage(path, null));
            imagePath = path;
        } else {
            System.out.println("No file selected");
        }
    }//GEN-LAST:event_btnChooseImgActionPerformed*/
    }//GEN-LAST:event_btnSaveReceiptToFileActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        int answer = JOptionPane.showConfirmDialog(
            null,
            "Do you really want to exit?",
            "Please, confirm exit",
            JOptionPane.YES_NO_OPTION
        );
        if(answer == JOptionPane.YES_OPTION){
            System.exit(0);
        }
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnShowReceiptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowReceiptActionPerformed
        receipt.delete(0, receipt.length());
        receipt.append("********************Receipt********************\n");
        receipt.append("№ name number price subtotal\n");
        if(tableMeal.getRowCount() > 0){
            for(int i = 0; i < tableMeal.getRowCount(); ++i){
                String name = (String)tableMeal.getModel().getValueAt(i, TModelMeal.COLUMN_NAME);
                double price = (double)tableMeal.getModel().getValueAt(i, TModelMeal.COLUMN_PRICE);
                int numServes = (int)tableMeal.getModel().getValueAt(i, TModelMeal.COLUMN_SERVES_NUMBER);
                if(price * numServes > 0.0){
                    receipt.append(String.format("%d) %s %12.3f * %d =   %12.3f\n",
                            i + 1, name, price, numServes, price * numServes));
                }
            }
        }
        receipt.append("\n---------------------------------------------\n");
        receipt.append(String.format("Cost of meals = %s\n", txtMealCost.getText()));
        //Total cost of drinks
        if(tableDrinks.getRowCount() > 0){
            for(int i = 0; i < tableDrinks.getRowCount(); ++i){
                String name = (String)tableDrinks.getModel().getValueAt(i, TModelDrinks.COLUMN_NAME);
                double price = (double)tableDrinks.getModel().getValueAt(i, TModelDrinks.COLUMN_PRICE);
                int numServes = (int)tableDrinks.getModel().getValueAt(i, TModelDrinks.COLUMN_SERVES_NUMBER);
                if(price * numServes > 0.0){
                    receipt.append(String.format("%d) %s %12.3f * %d = %f\n",
                            i + 1, name, price, numServes, price * numServes));
                }
            }
        }
        receipt.append(String.format("Cost of drinks = %s\n", txtDrinksCost.getText()));
        receipt.append("\n---------------------------------------------\n");
        receipt.append(String.format("Tax = %12.3f\n", spinnerTax.getValue()));
        receipt.append(String.format("Delivery = %12.3f\n", spinnerDelivery.getValue()));
        receipt.append(String.format("Discount = %12.3f\n", spinnerDiscount.getValue()));
        receipt.append(String.format("Total = %s\n", txtTotal.getText()));
        receipt.append("\n                    *****                    \n");
        txtAreaReceipt.setText(receipt.toString());
    }//GEN-LAST:event_btnShowReceiptActionPerformed

    private MealDTO readMealFromIputFields(){
        MealDTO meal = new MealDTO();
        meal.setName(txtNameMeal.getText());
        meal.setType(MealType.valueOf(comboMealTypes.getSelectedItem().toString()));
        meal.setPrice((double)spinnerPriceMeal.getValue());
        meal.setVegetarian(checkBoxIsMealVegetarian.isSelected());
        meal.setTransgenic(checkBoxIsMealTransgenic.isSelected());
        meal.setAvailable(checkBoxIsMealAvailable.isSelected());
        return meal;
    }
    
    private DrinkDTO readDrinkFromInputFields(){
        DrinkDTO drink = new DrinkDTO();
        drink.setName(txtNameDrinks.getText());
        drink.setPrice((double)spinnerPriceDrink.getValue());
        drink.setAlcohol(checkBoxIsDrinkAlcoholic.isSelected());
        drink.setAvailable(checkBoxIsDrinkAvailable.isSelected());
        return drink;
    }
    
    private void calcCosts(){
        clearTablesSelection();
        double costMeal = 0.0, costDrinks = 0.0;
        double discount = (double)spinnerDiscount.getValue();
        double delivery = (double)spinnerDelivery.getValue();
        double tax = (double)spinnerTax.getValue();
        //Total cost of meal
//        receipt.delete(0, receipt.length());
//        receipt.append("********************Receipt********************\n");
//        receipt.append("№ name number price subtotal\n");
        if(tableMeal.getRowCount() > 0){
            for(int i = 0; i < tableMeal.getRowCount(); ++i){
                String name = (String)tableMeal.getModel().getValueAt(i, TModelMeal.COLUMN_NAME);
                double price = (double)tableMeal.getModel().getValueAt(i, TModelMeal.COLUMN_PRICE);
                int numServes = (int)tableMeal.getModel().getValueAt(i, TModelMeal.COLUMN_SERVES_NUMBER);
                costMeal += price * numServes;
//                if(price * numServes > 0.0){
//                    receipt.append(String.format("%d) %s %12.3f * %d =   %12.3f\n",
//                            i + 1, name, price, numServes, price * numServes));
//                }
            }
        }
//        receipt.append("\n---------------------------------------------\n");
//        receipt.append(String.format("Cost of meals = %12.3f\n", costMeal));
        //Total cost of drinks
        if(tableDrinks.getRowCount() > 0){
            for(int i = 0; i < tableDrinks.getRowCount(); ++i){
                String name = (String)tableDrinks.getModel().getValueAt(i, TModelDrinks.COLUMN_NAME);
                double price = (double)tableDrinks.getModel().getValueAt(i, TModelDrinks.COLUMN_PRICE);
                int numServes = (int)tableDrinks.getModel().getValueAt(i, TModelDrinks.COLUMN_SERVES_NUMBER);
                costDrinks += price * numServes;
//                if(price * numServes > 0.0){
//                    receipt.append(String.format("%d) %s %12.3f * %d = %f\n",
//                            i + 1, name, price, numServes, price * numServes));
//                }
            }
        }
//        receipt.append(String.format("Cost of drinks = %12.3f\n", costDrinks));
        
        double subtotal = costMeal + costDrinks + delivery;
        
        if(rbtnDiscountPercentage.isSelected()){
            discount = discount / 100 * subtotal;
        }
        
        double total = subtotal + tax - discount;
        txtMealCost.setText(String.format("%12.3f", costMeal));
        txtDrinksCost.setText(String.format("%12.3f", costDrinks));
        txtSubtotal.setText(String.format("%12.3f", subtotal));
        txtTotal.setText(String.format("%12.3f", total));
//        receipt.append("\n---------------------------------------------\n");
//        receipt.append(String.format("Tax = %12.3f\n", tax));
//        receipt.append(String.format("Delivery = %12.3f\n", delivery));
//        receipt.append(String.format("Discount = %12.3f\n", discount));
//        receipt.append(String.format("Total = %12.3f\n", total));
//        receipt.append("\n                    *****                    \n");
//        txtAreaReceipt.setText(receipt.toString());
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteDrink;
    private javax.swing.JButton btnDeleteMeal;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnInsertDrink;
    private javax.swing.JButton btnInsertMeal;
    private javax.swing.JButton btnResetMealSearch;
    private javax.swing.JButton btnResetSearchDrinks;
    private javax.swing.JButton btnResetTotal;
    private javax.swing.JButton btnSaveReceiptToFile;
    private javax.swing.JButton btnSearchDrinks;
    private javax.swing.JButton btnSearchMeal;
    private javax.swing.JButton btnShowReceipt;
    private javax.swing.JButton btnTotal;
    private javax.swing.JButton btnUpdateDrink;
    private javax.swing.JButton btnUpdateMeal;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox checkBoxConsiderMealPrice;
    private javax.swing.JCheckBox checkBoxConsiderPriceDrinks;
    private javax.swing.JCheckBox checkBoxIsDrinkAlcoholic;
    private javax.swing.JCheckBox checkBoxIsDrinkAvailable;
    private javax.swing.JCheckBox checkBoxIsMealAvailable;
    private javax.swing.JCheckBox checkBoxIsMealTransgenic;
    private javax.swing.JCheckBox checkBoxIsMealVegetarian;
    private javax.swing.JCheckBox checkBoxOnlyNonAlcogolic;
    private javax.swing.JCheckBox checkBoxOnlyVegans;
    private javax.swing.JComboBox comboMealTypes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JRadioButton rbtnDiscountAbsolute;
    private javax.swing.JRadioButton rbtnDiscountPercentage;
    private javax.swing.JSpinner spinnerDelivery;
    private javax.swing.JSpinner spinnerDiscount;
    private javax.swing.JSpinner spinnerDrinksPriceMAX;
    private javax.swing.JSpinner spinnerDrinksPriceMIN;
    private javax.swing.JSpinner spinnerMealPriceMAX;
    private javax.swing.JSpinner spinnerMealPriceMIN;
    private javax.swing.JSpinner spinnerPriceDrink;
    private javax.swing.JSpinner spinnerPriceMeal;
    private javax.swing.JSpinner spinnerTax;
    private javax.swing.JTable tableDrinks;
    private javax.swing.JTable tableMeal;
    private javax.swing.JTextArea txtAreaReceipt;
    private javax.swing.JTextField txtDrinksCost;
    private javax.swing.JTextField txtIDDrinks;
    private javax.swing.JTextField txtIDMeal;
    private javax.swing.JTextField txtMealCost;
    private javax.swing.JPanel txtNameDrink;
    private javax.swing.JTextField txtNameDrinks;
    private javax.swing.JTextField txtNameMeal;
    private javax.swing.JTextField txtSearchDrinks;
    private javax.swing.JTextField txtSearchMeal;
    private javax.swing.JTextField txtSubtotal;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables
}
